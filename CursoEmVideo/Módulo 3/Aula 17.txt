--------------------------VARIAVÉIS COMPOSSTAS - LISTAS ---------------------------

                                c

Váriveis compostas como listas são váriáveis que diferentemente das tuplas 
não são imutáveis, permitindo a alteração de seus elementos.
Uma lista pode ser identificada pelo uso colchetes []

MÉTODO APPEND()
Para se adicionar elementos na lista usa-se o método append(), que adiciona o 
elemento ao final da lista


MÉTODO INSERT()
Para adicionar elemetos em outras partes da lista ussa-se o método insert()
Ex:   
lanche = ['hamburguer', 'alface', 'queijo', 'tomate']

lache.insert(0, 'salsicha')  #esta adicionando 'salsicha' na posição '0'

isso altera o indice de todos os elementos posteriores 

COMANDO DEL

del lanche[3] # apaga o elemento de indice número "3"

MÉTODO POP()
normalmente é usado para apagar o último elemento
mas é possivel passar como parametro o indice  e apagar outros elementos 

lanche.pop() # elimina o último elemento
lanche.pop(3) # elimina o elemento de indice "3"


MÉTODO REMOVE()
não se passa o indice como parâmetro e sim o valor que quer remover

lanche.remove('tomate')


PARA VERIFICAR SE O ITEM E EXISTE NA LISTA, SE SIM ELE É REMOVIDO
percorre lista e remove o primeiro valor encontrado se existirem mais valores iguais

lanche = ['hamburguer', 'tomate', 'queijo', 'presunto']

if 'ovo' in lanche:
   lanche.remove('ovo')


PARA CRIAR LISTAS ATRAVÉS DE RANGES

valores = list(range(4,11)) #conta de 4 a 10 e coloca tudo dentro de "valores"

ourto exemplo

valores = [8, 2, 5, 4, 9, 3, 0]

para color em ordem:   valores.sorted()  
para colocar na ordem inversa "decrecente"  valores.sort(reverse=True)


PARA SABER O TAMANHO DA LISTA
len(valores) é 7


RESUMO:

num = [2, 5, 9, 1]
num[2] = 3 #substitui o "9" pelo "3"
num.append(7) #adiciona o "7" ao final da lista
num.sort(reverse=True) #coloca em ordem decreceste
num.sort() #coloca em ordem crescente
num.insert(2,0) #adiciona o "0" no indice(posicao) "2"
num.pop() #remove o ultimo item
print(num)
print(f'Essa lista tem {len(num)} elementos')


EXEMPLOS:

valores = []

valores.append(1)
valores.append(7)
valores.append(8)
valores.append(11)

#para cada elemento da lista v recebe o valor de valores
# e i recebe o indice
for i, v in enumerate(valores):
    print(f'Na posição {i} temos o valor: {v}')



EXEMPLO:

a = [1, 3 , 8 , 9]
b = a
b[2] = 8 


print(f'Lista A: {a}') # o "8" tambem aparece nma lista a
print(f'Lista B: {b}') 

a lista "a" tambem é alterada, em puthon quando uma lista recebe outra as duas ficam 
"ligadas".




para "copiar" e  não ser criada essa ligação

a = [1, 3 , 8 , 9]
b = a[:]  # "b" recebe os itens de "a"
b[2] = 8 



                                   PARTE 2


lista1 = [1, 2, 3]
lista2 = lista1

Nesse caso, lista2 receberá uma cópia da referência de lista1, 
ou seja, lista2 e lista1 referenciam a mesma lista na memória. 
Qualquer mudança que você fizer em lista1 ou lista2 afetará a mesma lista. 
Por exemplo:

lista1.append(4)
print(lista1) # Saída: [1, 2, 3, 4]
print(lista2) # Saída: [1, 2, 3, 4]

Observe que quando você adiciona o elemento 4 à lista1, 
a mesma mudança é refletida em lista2.

Se você quiser fazer uma cópia completa da lista, você pode usar o método 
copy() ou a sintaxe de fatiamento ([:]). Por exemplo:
   
lista1 = [1, 2, 3]
lista2 = lista1.copy()  # ou lista2 = lista1[:]

esse caso, lista2 será uma cópia completa de lista1,
ou seja, as duas listas serão independentes e alterações feitas em uma não afetarão 
a outra.



PARA UMA LISTA RECEBER VÁRIAS OUTRAS LISTAS: 

Para criar uma lista de listas em Python, você pode simplesmente criar uma lista 
vazia e adicionar as outras listas como elementos dessa lista. Por exemplo,
para criar uma lista de pessoas onde cada pessoa é representada por uma lista
com idade, peso e profissão, você pode fazer o seguinte:

pessoa1 = [20, 70.5, 'engenheiro']
pessoa2 = [35, 62.1, 'médico']
pessoas = [pessoa1, pessoa2]


Aqui, pessoa1 e pessoa2 são listas individuais que representam as informações de
cada pessoa. Depois, criamos a lista pessoas e adicionamos pessoa1 e pessoa2 a 
ela usando a sintaxe de colchetes:


pessoas = [pessoa1, pessoa2]

Observe que a lista pessoas agora contém duas listas, que representam as informações
de duas pessoas diferentes. Para acessar as informações de uma pessoa específica, 
você pode usar a sintaxe de indexação dupla, como por exemplo pessoas[0][0] para 
obter a idade da primeira pessoa.

Se você quiser adicionar mais pessoas à lista, basta criar outras listas individuais
para elas e adicioná-las à lista pessoas usando a mesma sintaxe:

pessoa3 = [25, 58.9, 'professor']
pessoas.append(pessoa3)

Aqui, criamos uma nova lista pessoa3 que representa a informação de uma terceira
pessoa e adicionamos essa lista à lista pessoas usando o método append(). 
Agora, a lista pessoas contém três listas, cada uma representando as informações
de uma pessoa diferente.






